# This workflow will do a clean install of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

name: Node.js CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:

    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [14.x]
        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/

    steps:
    - uses: actions/checkout@v2
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v2
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    - run: npm ci
    - name: Make dotenv file
      run: |
        touch .env
        echo ${{ secrets.SPOTIFY_CLIENT }} >> .env
        echo ${{ secrets.SPOTIFY_SECRET }} >> .env
        echo ${{ secrets.MONGODB_URI }} >> .env
        echo ${{ secrets.CACHE_EXP }} >> .env
        cat .env
    - run: npm run build
    - name: Package Zip
      run: zip -r deploy.zip . -x *.git*
    - name: Beanstalk Deploy
      uses: einaregilsson/beanstalk-deploy@v20
      with:
        # AWS Access Key
        aws_access_key: ${{ secrets.AWS_ACCESS_KEY }}
        # AWS Secret Key
        aws_secret_key: ${{ secrets.AWS_SECRET_KEY }}
        # AWS Region
        region: us-east-1
        # Beanstalk application name
        application_name: song-nebula-backend
        # Beanstalk environment name. If empty a version will be created but not deployed anywhere.
        environment_name: Songnebulabackend-env
        # Version label for new Beanstalk version
        version_label: 0.${{github.run_number}}
        # Version description for the new Beanstalk version
        version_description: First deploy
        deployment_package: deploy.zip
